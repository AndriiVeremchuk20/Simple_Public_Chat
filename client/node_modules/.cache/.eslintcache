[{"/home/andrei/Code/Twitter_clon/client/src/index.tsx":"1","/home/andrei/Code/Twitter_clon/client/src/App.tsx":"2","/home/andrei/Code/Twitter_clon/client/src/pages/Login.tsx":"3","/home/andrei/Code/Twitter_clon/client/src/pages/Registration.tsx":"4","/home/andrei/Code/Twitter_clon/client/src/servises/auth.ts":"5","/home/andrei/Code/Twitter_clon/client/src/components/Spinner.tsx":"6","/home/andrei/Code/Twitter_clon/client/src/store/index.ts":"7","/home/andrei/Code/Twitter_clon/client/src/hooks/reduxHooks.ts":"8","/home/andrei/Code/Twitter_clon/client/src/store/userSlice.ts":"9"},{"size":696,"mtime":1673301539437,"results":"10","hashOfConfig":"11"},{"size":671,"mtime":1673303442136,"results":"12","hashOfConfig":"11"},{"size":3359,"mtime":1673306650667,"results":"13","hashOfConfig":"11"},{"size":4398,"mtime":1673299310271,"results":"14","hashOfConfig":"11"},{"size":821,"mtime":1673305575314,"results":"15","hashOfConfig":"11"},{"size":594,"mtime":1672609820958,"results":"16","hashOfConfig":"11"},{"size":300,"mtime":1673305562235,"results":"17","hashOfConfig":"11"},{"size":272,"mtime":1673302137465,"results":"18","hashOfConfig":"11"},{"size":663,"mtime":1673306587484,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1iyzvib",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andrei/Code/Twitter_clon/client/src/index.tsx",[],[],[],"/home/andrei/Code/Twitter_clon/client/src/App.tsx",[],[],"/home/andrei/Code/Twitter_clon/client/src/pages/Login.tsx",["49","50","51","52"],[],"/home/andrei/Code/Twitter_clon/client/src/pages/Registration.tsx",["53","54","55","56","57","58","59","60"],[],"import { Button, Paper, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useCallback, useState } from \"react\";\nimport { Controller, SubmitHandler, useForm } from \"react-hook-form\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { authServises } from \"../servises/auth\";\nimport { RegistrationUser, User } from \"../types/User\";\n\nexport const Registration = () => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const queryClient = useQueryClient();\n\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<RegistrationUser>({\n    mode: \"onChange\",\n  });\n\n  const { mutate, isLoading, isSuccess, isError, error } = useMutation(authServises.register, {\n   \n    onSuccess: (data) => {\n      console.log(data);\n      const message = \"success\";\n      alert(message);\n    },\n    onError: ()=>{\n      alert(\"there was an error\")\n    },\n    onSettled: ()=>{\n      queryClient.invalidateQueries('create');\n    }\n  });\n\n  const onSubmit: SubmitHandler<RegistrationUser> = useCallback((data) => {\n    const newUser = {\n      ...data\n    }\n    mutate(newUser);\n  }, []);\n\n  const onButtonClick = useCallback(() => {\n    setShowPassword((prev) => !prev);\n  }, []);\n\n  return (\n    <Paper style={styles.main}>\n      <Box sx={styles.form}>\n        <Controller\n          name=\"username\"\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: \"Username required\" }}\n          render={({ field: { onChange, value }, fieldState: { error } }) => (\n            <TextField\n              sx={styles.input}\n              required\n              error={!!error}\n              type={\"text\"}\n              label=\"Username\"\n              onChange={onChange}\n              value={value}\n              variant=\"outlined\"\n              helperText={error ? error.message : null}\n            />\n          )}\n        />\n        <Controller\n          name=\"email\"\n          control={control}\n          defaultValue=\"\"\n          rules={{ required: \"Email required\" }}\n          render={({ field: { onChange, value }, fieldState: { error } }) => (\n            <TextField\n            sx={styles.input}\n              required\n              error={!!error}\n              type={\"email\"}\n              label=\"Email\"\n              onChange={onChange}\n              value={value}\n              variant=\"outlined\"\n              helperText={error ? error.message : null}\n            />\n          )}\n        />\n\n        <Controller\n          name=\"avatarUrl\"\n          control={control}\n          defaultValue=\"\"\n          render={({ field: { onChange, value }, fieldState: { error } }) => (\n            <TextField\n            sx={styles.input}\n              type={\"text\"}\n              label=\"Avatal\"\n              onChange={onChange}\n              value={value}\n              variant=\"outlined\"\n              helperText={error ? error.message : null}\n            />\n          )}\n        />\n\n        <Box sx={styles.inputPassword}>\n          <Controller\n            name=\"password\"\n            control={control}\n            defaultValue=\"\"\n            rules={{ required: \"Password required\" }}\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\n              <TextField\n                required\n              sx={styles.input}\n                error={!!error}\n                type={showPassword ? \"text\" : \"password\"}\n                label=\"Password\"\n                onChange={onChange}\n                value={value}\n                variant=\"outlined\"\n                helperText={error ? error.message : null}\n              />\n            )}\n          />\n          <Button onClick={onButtonClick}>{showPassword ? \"🫣\" : \"😶‍🌫️\"}</Button>\n        </Box>\n        <Button onClick={handleSubmit(onSubmit)}>Reg🤝🏼</Button>\n      </Box>\n    </Paper>\n  );\n};\n\nconst styles = {\n  main: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    border: \"solid black 3px\",\n    borderRadius: \"5px\",\n    padding: \"20px\",\n  },\n  input: {\n    width: \"100%\",\n    margin: \"5px\",\n  },\n  inputPassword: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\", \n  },\n}\n","/home/andrei/Code/Twitter_clon/client/src/servises/auth.ts",["61","62"],[],"/home/andrei/Code/Twitter_clon/client/src/components/Spinner.tsx",[],[],"/home/andrei/Code/Twitter_clon/client/src/store/index.ts",[],[],"/home/andrei/Code/Twitter_clon/client/src/hooks/reduxHooks.ts",[],[],"/home/andrei/Code/Twitter_clon/client/src/store/userSlice.ts",[],[],{"ruleId":"63","severity":1,"message":"64","line":8,"column":21,"nodeType":"65","messageId":"66","endLine":8,"endColumn":25},{"ruleId":"63","severity":1,"message":"67","line":14,"column":9,"nodeType":"65","messageId":"66","endLine":14,"endColumn":13},{"ruleId":"63","severity":1,"message":"68","line":19,"column":18,"nodeType":"65","messageId":"66","endLine":19,"endColumn":24},{"ruleId":"69","severity":1,"message":"70","line":36,"column":6,"nodeType":"71","endLine":36,"endColumn":8,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"73","line":5,"column":23,"nodeType":"65","messageId":"66","endLine":5,"endColumn":31},{"ruleId":"63","severity":1,"message":"64","line":7,"column":28,"nodeType":"65","messageId":"66","endLine":7,"endColumn":32},{"ruleId":"63","severity":1,"message":"68","line":16,"column":18,"nodeType":"65","messageId":"66","endLine":16,"endColumn":24},{"ruleId":"63","severity":1,"message":"74","line":21,"column":19,"nodeType":"65","messageId":"66","endLine":21,"endColumn":28},{"ruleId":"63","severity":1,"message":"75","line":21,"column":30,"nodeType":"65","messageId":"66","endLine":21,"endColumn":39},{"ruleId":"63","severity":1,"message":"76","line":21,"column":41,"nodeType":"65","messageId":"66","endLine":21,"endColumn":48},{"ruleId":"63","severity":1,"message":"77","line":21,"column":50,"nodeType":"65","messageId":"66","endLine":21,"endColumn":55},{"ruleId":"69","severity":1,"message":"70","line":41,"column":6,"nodeType":"71","endLine":41,"endColumn":8,"suggestions":"78"},{"ruleId":"63","severity":1,"message":"64","line":2,"column":39,"nodeType":"65","messageId":"66","endLine":2,"endColumn":43},{"ruleId":"63","severity":1,"message":"79","line":30,"column":7,"nodeType":"65","messageId":"66","endLine":30,"endColumn":11},"@typescript-eslint/no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'mutate'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'useQuery' is defined but never used.","'isLoading' is assigned a value but never used.","'isSuccess' is assigned a value but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.",["81"],"'auth' is assigned a value but never used.",{"desc":"82","fix":"83"},{"desc":"82","fix":"84"},"Update the dependencies array to be: [mutate]",{"range":"85","text":"86"},{"range":"87","text":"86"},[1085,1087],"[mutate]",[1167,1169]]