{"ast":null,"code":"const PORT = 8080;\nconst BaseUrl = `http://127.0.0.1:${PORT}`;\nvar methods;\n(function (methods) {\n  methods[\"GET\"] = \"GET\";\n  methods[\"POST\"] = \"POST\";\n})(methods || (methods = {}));\nconst commonHeaders = {\n  \"Content-Type\": \"application/json\"\n};\nconst perfomRequest = async _ref => {\n  let {\n    path,\n    method,\n    body\n  } = _ref;\n  try {\n    const bodyString = body ? JSON.stringify(body) : undefined;\n    const req = await fetch([BaseUrl, path].join(\"/\"), {\n      method,\n      headers: commonHeaders,\n      body: bodyString\n    });\n    if (req.ok) {\n      const dataJson = await req.json();\n      console.log(dataJson);\n      return {\n        success: true,\n        response: dataJson\n      };\n    }\n    return {\n      success: false,\n      message: \"something went wrong\"\n    };\n  } catch (e) {\n    console.log(`error ${e}`);\n    return {\n      success: false,\n      message: \"something went wrong\"\n    };\n  }\n};\nexport const authServises = {\n  registerUser: newUser => {\n    perfomRequest({\n      path: \"auth/registration\",\n      method: methods.POST,\n      body: newUser\n    });\n  },\n  getUsers: () => {\n    return perfomRequest({\n      path: \"auth/users\",\n      method: methods.GET\n    });\n  }\n};","map":{"version":3,"names":["PORT","BaseUrl","methods","commonHeaders","perfomRequest","path","method","body","bodyString","JSON","stringify","undefined","req","fetch","join","headers","ok","dataJson","json","console","log","success","response","message","e","authServises","registerUser","newUser","POST","getUsers","GET"],"sources":["/home/andrei/Code/Twitter_clon/client/src/servises/auth.ts"],"sourcesContent":["import { User } from \"../types/User\";\n\nconst PORT = 8080;\nconst BaseUrl = `http://127.0.0.1:${PORT}`;\n\nenum methods {\n  GET = \"GET\",\n  POST = \"POST\",\n}\n\nconst commonHeaders = {\n  \"Content-Type\": \"application/json\",\n};\n\ninterface requestInterface {\n  path: string;\n  method: methods;\n  body?: any;\n}\n\nconst perfomRequest = async ({ path, method, body }: requestInterface) => {\n  try {\n    const bodyString = body ? JSON.stringify(body) : undefined;\n    const req = await fetch([BaseUrl, path].join(\"/\"), {\n      method,\n      headers: commonHeaders,\n      body: bodyString,\n    });\n\n    if (req.ok) {\n      const dataJson = await req.json();\n      console.log(dataJson);\n      return { success: true, response: dataJson };\n    }\n    return { success: false, message: \"something went wrong\" };\n  } catch (e) {\n    console.log(`error ${e}`);\n    return { success: false, message: \"something went wrong\" };\n  }\n};\n\nexport const authServises = {\n  registerUser: (newUser: User) => {\n    perfomRequest({\n      path: \"auth/registration\",\n      method: methods.POST,\n      body: newUser,\n    });\n  },\n  getUsers: () => {\n    return perfomRequest({ path: \"auth/users\", method: methods.GET });\n  },\n};\n"],"mappings":"AAEA,MAAMA,IAAI,GAAG,IAAI;AACjB,MAAMC,OAAO,GAAI,oBAAmBD,IAAK,EAAC;AAAC,IAEtCE,OAAO;AAAA,WAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;AAAA,GAAPA,OAAO,KAAPA,OAAO;AAKZ,MAAMC,aAAa,GAAG;EACpB,cAAc,EAAE;AAClB,CAAC;AAQD,MAAMC,aAAa,GAAG,cAAoD;EAAA,IAA7C;IAAEC,IAAI;IAAEC,MAAM;IAAEC;EAAuB,CAAC;EACnE,IAAI;IACF,MAAMC,UAAU,GAAGD,IAAI,GAAGE,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,GAAGI,SAAS;IAC1D,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,CAACZ,OAAO,EAAEI,IAAI,CAAC,CAACS,IAAI,CAAC,GAAG,CAAC,EAAE;MACjDR,MAAM;MACNS,OAAO,EAAEZ,aAAa;MACtBI,IAAI,EAAEC;IACR,CAAC,CAAC;IAEF,IAAII,GAAG,CAACI,EAAE,EAAE;MACV,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;MACjCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,OAAO;QAAEI,OAAO,EAAE,IAAI;QAAEC,QAAQ,EAAEL;MAAS,CAAC;IAC9C;IACA,OAAO;MAAEI,OAAO,EAAE,KAAK;MAAEE,OAAO,EAAE;IAAuB,CAAC;EAC5D,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVL,OAAO,CAACC,GAAG,CAAE,SAAQI,CAAE,EAAC,CAAC;IACzB,OAAO;MAAEH,OAAO,EAAE,KAAK;MAAEE,OAAO,EAAE;IAAuB,CAAC;EAC5D;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG;EAC1BC,YAAY,EAAGC,OAAa,IAAK;IAC/BvB,aAAa,CAAC;MACZC,IAAI,EAAE,mBAAmB;MACzBC,MAAM,EAAEJ,OAAO,CAAC0B,IAAI;MACpBrB,IAAI,EAAEoB;IACR,CAAC,CAAC;EACJ,CAAC;EACDE,QAAQ,EAAE,MAAM;IACd,OAAOzB,aAAa,CAAC;MAAEC,IAAI,EAAE,YAAY;MAAEC,MAAM,EAAEJ,OAAO,CAAC4B;IAAI,CAAC,CAAC;EACnE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}